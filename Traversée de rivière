/**********************************************************************************************/
/************************************ Traversée de rivière ************************************/
/**********************************************************************************************/

#include <stdio.h>
#include <allegro.h>

typedef struct rondin{
    BITMAP * wood;
    int rondin_x[10];
    int rondin_y[10];
    int x[10], y[10];
    int vitesse, acceleration;
}t_rondin;

typedef struct personnage_traversee
{
    BITMAP* perso1;
    BITMAP* perso2;
    int perso1_x, perso1_y;
    int perso2_x, perso2_y;

}t_personnage_traversee;


void position_depart_traversee(t_rondin * rondin, t_personnage_traversee* perso){
    /***** position x rondins aléatoire *****/
    for(int i = 0; i < 10; i++){
        rondin->rondin_x[i] = rand()% 750;
        rondin->x[i] = rondin->rondin_x[i];
    }
    /***** position de départ *****/
    perso->perso2_x = 400;
    perso->perso2_y = 530;
    perso->perso1_x = 360;
    perso->perso1_y = 530;

    /***** position y rondins *****/
    rondin->rondin_y[0] = 490;
    rondin->y[0] = 490;
    for(int i = 1; i < 10; i++){
        rondin->rondin_y[i]= rondin->rondin_y[i-1] - 40 ;
        rondin->y[i] =  rondin->rondin_y[i];
    }
}

void deplacer_joueur_traversee( t_personnage_traversee * perso){
    if(key[KEY_UP]){
        perso->perso2_y = perso->perso2_y - 40;
    }
    if(key[KEY_SPACE]){
        perso->perso1_y = perso->perso1_y - 40;
    }
}

void deplacer_rondin(t_rondin * rondin){
    for(int i = 0; i < 10; i ++){
        if(rondin->rondin_x[i] < 750){
            rondin->vitesse = rondin->vitesse + rondin->acceleration;
            rondin->rondin_x[i] = rondin->rondin_x[i] + rondin->vitesse ;
            rondin->x[i] = rondin->rondin_x[i];
        }
        if(rondin->rondin_x[i] >= 750){
            rondin->rondin_x[i] = 0;
            rondin->x[i] = rondin->rondin_x[i];
            rondin->vitesse = 10;
            rondin->acceleration = 2;
        }
    }
}

void affichage_traversee (t_rondin * rondin, t_personnage_traversee* perso, BITMAP* buffer){
    BITMAP * background = load_bitmap("vfond1.bmp", NULL);
    clear_bitmap(buffer);
    stretch_sprite(buffer, background, 0, 0, SCREEN_W, SCREEN_H);
    for (int i = 0; i < 8; i++) {
        stretch_sprite(buffer, rondin->wood, rondin->rondin_x[i], rondin->rondin_y[i], rondin->wood->w / 4,rondin->wood->h / 4);
        rectfill(buffer,rondin->x[i] + 22, rondin->y[i] + 22,rondin->x[i]  + rondin->wood->w/4 - 24, rondin->y[i] + rondin->wood->h/4 - 26, makecol(255,0,0));
    }
    stretch_sprite(buffer, perso->perso1, perso->perso1_x, perso->perso1_y, perso->perso1->w / 4,perso->perso1->h / 4);
    stretch_sprite(buffer, perso->perso2, perso->perso2_x, perso->perso2_y, perso->perso1->w / 4,perso->perso1->h / 4);
    blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
    rest(1000);
}

void victoire_traversee(t_personnage_traversee* perso, BITMAP* buffer){
    if (perso->perso2_y <= 170) {
        textprintf_ex(buffer, font, 330, 85, makecol(255, 255, 255), -1, "joueur 2 a gagne");
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        rest(10);
        rest(100000);
    }
    if (perso->perso1_y <= 170) {
        textprintf_ex(buffer, font, 330, 85, makecol(255, 255, 255), -1, "joueur 1 a gagne");
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        rest(10);
        rest(100000);
    }
}

void charger_bitmap_traverse (t_rondin * rondin, t_personnage_traversee* perso){
    rondin->wood = create_bitmap(800, 600);
    rondin->wood = load_bitmap( "rondin.bmp", NULL);
    perso->perso1 = create_bitmap(800,600);
    perso->perso1 = load_bitmap("perso1_milieu.bmp", NULL);
    perso->perso2 = create_bitmap(800,600);
    perso->perso2 = load_bitmap("perso2_milieu.bmp", NULL);
}

void deplacement_rondin_joueur(t_rondin * rondin, t_personnage_traversee* perso, BITMAP * buffer){
    for(int i = 0; i < 8; i++) {
        if (rondin->rondin_y[i] == perso->perso1_y) {
            int couleur_rectangle = getpixel(buffer, perso->perso1_x, perso->perso1_y);
            if(!getr(couleur_rectangle)){
                textprintf_ex(buffer, font, 330, 85, makecol(0, 0, 0), -1, "joueur 1 a perdu ");
            }
            else{
                perso->perso1_x = rondin->x[i];
            }
        }
    }
    for(int i = 0; i < 8; i++){
        if(rondin->rondin_y[i] == perso->perso2_y )  {
            int couleur_rectangle = getpixel(buffer, perso->perso2_x, perso->perso2_y);
            if(!getr(couleur_rectangle)){
                textprintf_ex(buffer, font, 330, 85, makecol(0, 0, 0), -1, "joueur 1 a perdu ");
            }
            else{
                perso->perso2_x =rondin->x[i];

            }
        }
    }
}

void traversee(t_rondin * rondin, t_personnage_traversee* perso, BITMAP * buffer){

    charger_bitmap_traverse (rondin, perso);
    position_depart_traversee(rondin, perso);
    rondin->vitesse = 10;
    rondin->acceleration = 10;
    buffer = create_bitmap(SCREEN_W, SCREEN_H);

    while(! key[KEY_ESC]){

        deplacer_rondin(rondin);
        deplacer_joueur_traversee(perso);
        deplacement_rondin_joueur(rondin, perso, buffer);
        affichage_traversee (rondin, perso, buffer);
        victoire_traversee(perso, buffer);
    }
}

int main() {
    allegro_init();
    set_color_depth(desktop_color_depth());
    if ((set_gfx_mode(GFX_AUTODETECT_WINDOWED, 800, 600, 0, 0)) != 0) {
        allegro_message("Pb de mode graphique");
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    install_keyboard();
    install_mouse();
    srand(time(NULL));
    t_rondin * rondin;
    t_personnage_traversee * perso;
    BITMAP * buffer = create_bitmap(SCREEN_W, SCREEN_H);

    traversee(&rondin, perso, &buffer);
    destroy_bitmap(rondin->wood);
    return 0;
}END_OF_MAIN();
